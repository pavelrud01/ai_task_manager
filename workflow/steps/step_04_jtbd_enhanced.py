#!/usr/bin/env python3
"""
STEP-04: Enhanced JTBD Aggregation
–ê–≥—Ä–µ–≥–∞—Ü–∏—è JTBD —Å human-readable –≤—ã—Ö–æ–¥–∞–º–∏
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Any
from llm.client import LLMClient
from utils.io import ensure_dir, save_json
from validators.validate import validate_json_schema

class EnhancedJTBDProcessor:
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.llm = LLMClient(config)
        self.run_id = config.get('run_id')
        self.artifacts_dir = f"artifacts/{self.run_id}"
        
    def process_jtbd(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ JTBD —Å enhanced —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        """
        print("üéØ STEP-04: Enhanced JTBD Aggregation...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
        interviews_file = f"{self.artifacts_dir}/interviews/simulated.jsonl"
        interviews = self._load_interviews(interviews_file)
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º JTBD
        jtbd_data = self._aggregate_jtbd(interviews)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ —Å—Ö–µ–º–µ
        schema_file = "contracts/step_04_jtbd.schema.json"
        validation_result = validate_json_schema(jtbd_data, schema_file)
        
        if not validation_result['valid']:
            print(f"‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: {validation_result['errors']}")
            # –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            jtbd_data = self._autofix_jtbd(jtbd_data, validation_result['errors'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
        output_file = f"{self.artifacts_dir}/step_04_jtbd.json"
        save_json(jtbd_data, output_file)
        
        # –°–æ–∑–¥–∞–µ–º human-readable –≤–µ—Ä—Å–∏—é
        human_file = self._create_human_readable_version(jtbd_data)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = self._create_report(jtbd_data, validation_result)
        
        return {
            'jtbd_file': output_file,
            'human_readable_file': human_file,
            'validation_result': validation_result,
            'report': report
        }
    
    def _load_interviews(self, interviews_file: str) -> List[Dict]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ —Ñ–∞–π–ª–∞
        """
        interviews = []
        if os.path.exists(interviews_file):
            with open(interviews_file, 'r', encoding='utf-8') as f:
                for line in f:
                    if line.strip():
                        interviews.append(json.loads(line))
        return interviews
    
    def _aggregate_jtbd(self, interviews: List[Dict]) -> Dict[str, Any]:
        """
        –ê–≥—Ä–µ–≥–∞—Ü–∏—è JTBD –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é
        """
        prompt = f"""
        –ê–≥—Ä–µ–≥–∏—Ä—É–π JTBD –∏–∑ enhanced –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É AJTBD Core v1.1.
        
        –ò–Ω—Ç–µ—Ä–≤—å—é: {len(interviews)} —à—Ç—É–∫
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        1. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Big/Medium/Small jobs
        2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ job –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å type (functional/emotional/social)
        3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–∏—Å–ø—Ä–∞–≤–∏—Ç—å job.level + –∑–∞–ø–æ–ª–Ω–∏—Ç—å level_rationale
        4. –î–æ–±–∞–≤–∏—Ç—å 5 Whys –¥–ª—è –∫–∞–∂–¥–æ–≥–æ job
        5. –î–æ–±–∞–≤–∏—Ç—å outcomes (–æ–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
        6. –î–æ–±–∞–≤–∏—Ç—å evidence_refs (—Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é)
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ (JSON):
        {{
            "big_jobs": [
                {{
                    "job_id": "BJ-001",
                    "job_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ Big Job",
                    "type": "functional|emotional|social",
                    "level": "big",
                    "level_rationale": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è",
                    "description": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã",
                    "outcomes": ["–æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç 1", "–æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç 2"],
                    "five_whys": [
                        {{"why": "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?", "answer": "–æ—Ç–≤–µ—Ç"}},
                        {{"why": "–ü–æ—á–µ–º—É —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?", "answer": "–æ—Ç–≤–µ—Ç"}},
                        {{"why": "–ü–æ—á–µ–º—É —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ?", "answer": "–æ—Ç–≤–µ—Ç"}},
                        {{"why": "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç?", "answer": "–æ—Ç–≤–µ—Ç"}},
                        {{"why": "–ü–æ—á–µ–º—É —ç—Ç–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ?", "answer": "–æ—Ç–≤–µ—Ç"}}
                    ],
                    "evidence_refs": [
                        {{"interview_id": "I-001", "quote": "—Ü–∏—Ç–∞—Ç–∞", "confidence": 0.9}}
                    ],
                    "medium_jobs": [
                        {{
                            "job_id": "MJ-001",
                            "job_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ Medium Job",
                            "type": "functional|emotional|social",
                            "level": "medium",
                            "level_rationale": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è",
                            "description": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã",
                            "outcomes": ["–æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"],
                            "five_whys": [...],
                            "evidence_refs": [...],
                            "small_jobs": [
                                {{
                                    "job_id": "SJ-001",
                                    "job_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ Small Job",
                                    "type": "functional|emotional|social",
                                    "level": "small",
                                    "level_rationale": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è",
                                    "description": "–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã",
                                    "outcomes": ["–æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"],
                                    "five_whys": [...],
                                    "evidence_refs": [...]
                                }}
                            ]
                        }}
                    ]
                }}
            ],
            "coverage_pct": 85.5,
            "total_jobs": 15,
            "big_jobs_count": 3,
            "medium_jobs_count": 7,
            "small_jobs_count": 5
        }}
        
        –í–ê–ñ–ù–û: 
        - –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å, —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é
        - –ö–∞–∂–¥—ã–π job –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å evidence_refs
        - 5 Whys –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º–∏
        - level_rationale –¥–æ–ª–∂–Ω–æ –æ–±—ä—è—Å–Ω—è—Ç—å –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
        """
        
        response = self.llm.generate(prompt)
        data = json.loads(response)
        
        return data
    
    def _autofix_jtbd(self, jtbd_data: Dict[str, Any], errors: List[str]) -> Dict[str, Any]:
        """
        –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JTBD –¥–∞–Ω–Ω—ã—Ö
        """
        prompt = f"""
        –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ JTBD –¥–∞–Ω–Ω—ã—Ö.
        
        –û—à–∏–±–∫–∏: {errors}
        
        –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(jtbd_data, ensure_ascii=False, indent=2)}
        
        –ò—Å–ø—Ä–∞–≤—å –≤—Å–µ –æ—à–∏–±–∫–∏ –∏ –≤–µ—Ä–Ω–∏ –≤–∞–ª–∏–¥–Ω—ã–π JSON.
        """
        
        response = self.llm.generate(prompt)
        return json.loads(response)
    
    def _create_human_readable_version(self, jtbd_data: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ human-readable –≤–µ—Ä—Å–∏–∏ JTBD
        """
        output_file = f"{self.artifacts_dir}/jtbd_HUMAN_READABLE.md"
        
        content = f"""# üéØ JTBD: Human-Readable Version

**–ü—Ä–æ–¥—É–∫—Ç:** –°–∫–æ—Ä–æ—á—Ç–µ–Ω–∏–µ (Matrius)  
**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}  
**–ú–æ–¥–µ–ª—å:** gpt-5-high  
**–°—Ç—Ä—É–∫—Ç—É—Ä–∞:** Big ‚Üí Medium ‚Üí Small Jobs

---

## üìä –û–ë–ó–û–† JTBD

**–í—Å–µ–≥–æ —Ä–∞–±–æ—Ç:** {jtbd_data.get('total_jobs', 0)}  
**Big Jobs:** {jtbd_data.get('big_jobs_count', 0)}  
**Medium Jobs:** {jtbd_data.get('medium_jobs_count', 0)}  
**Small Jobs:** {jtbd_data.get('small_jobs_count', 0)}  
**–ü–æ–∫—Ä—ã—Ç–∏–µ:** {jtbd_data.get('coverage_pct', 0)}%

---

"""
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Big Jobs
        big_jobs = jtbd_data.get('big_jobs', [])
        
        for i, big_job in enumerate(big_jobs, 1):
            content += f"""## üéØ BIG JOB #{i}: {big_job.get('job_name', 'N/A')}

**ID:** {big_job.get('job_id', 'N/A')}  
**–¢–∏–ø:** {big_job.get('type', 'N/A')}  
**–£—Ä–æ–≤–µ–Ω—å:** {big_job.get('level', 'N/A')}  
**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è:** {big_job.get('level_rationale', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–û–ø–∏—Å–∞–Ω–∏–µ:**
{big_job.get('description', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
"""
            
            outcomes = big_job.get('outcomes', [])
            for outcome in outcomes:
                content += f"- {outcome}\n"
            
            content += f"""
**5 Whys:**
"""
            
            five_whys = big_job.get('five_whys', [])
            for j, why in enumerate(five_whys, 1):
                content += f"""
**{j}. {why.get('why', 'N/A')}**
{why.get('answer', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
"""
            
            content += f"""
**Evidence References:**
"""
            
            evidence_refs = big_job.get('evidence_refs', [])
            for ref in evidence_refs:
                content += f"- **{ref.get('interview_id', 'N/A')}:** \"{ref.get('quote', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\" (confidence: {ref.get('confidence', 'N/A')})\n"
            
            content += f"""
---

### üìã MEDIUM JOBS –¥–ª—è {big_job.get('job_name', 'N/A')}

"""
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Medium Jobs
            medium_jobs = big_job.get('medium_jobs', [])
            
            for j, medium_job in enumerate(medium_jobs, 1):
                content += f"""#### Medium Job #{j}: {medium_job.get('job_name', 'N/A')}

**ID:** {medium_job.get('job_id', 'N/A')}  
**–¢–∏–ø:** {medium_job.get('type', 'N/A')}  
**–£—Ä–æ–≤–µ–Ω—å:** {medium_job.get('level', 'N/A')}  
**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è:** {medium_job.get('level_rationale', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–û–ø–∏—Å–∞–Ω–∏–µ:**
{medium_job.get('description', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
"""
                
                medium_outcomes = medium_job.get('outcomes', [])
                for outcome in medium_outcomes:
                    content += f"- {outcome}\n"
                
                content += f"""
**5 Whys:**
"""
                
                medium_five_whys = medium_job.get('five_whys', [])
                for k, why in enumerate(medium_five_whys, 1):
                    content += f"""
**{k}. {why.get('why', 'N/A')}**
{why.get('answer', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
"""
                
                content += f"""
**Evidence References:**
"""
                
                medium_evidence_refs = medium_job.get('evidence_refs', [])
                for ref in medium_evidence_refs:
                    content += f"- **{ref.get('interview_id', 'N/A')}:** \"{ref.get('quote', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\" (confidence: {ref.get('confidence', 'N/A')})\n"
                
                content += f"""
---

##### üîß SMALL JOBS –¥–ª—è {medium_job.get('job_name', 'N/A')}

"""
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Small Jobs
                small_jobs = medium_job.get('small_jobs', [])
                
                for k, small_job in enumerate(small_jobs, 1):
                    content += f"""**Small Job #{k}: {small_job.get('job_name', 'N/A')}**

- **ID:** {small_job.get('job_id', 'N/A')}
- **–¢–∏–ø:** {small_job.get('type', 'N/A')}
- **–£—Ä–æ–≤–µ–Ω—å:** {small_job.get('level', 'N/A')}
- **–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è:** {small_job.get('level_rationale', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
- **–û–ø–∏—Å–∞–Ω–∏–µ:** {small_job.get('description', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}
- **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:** {', '.join(small_job.get('outcomes', []))}
- **Evidence:** {len(small_job.get('evidence_refs', []))} —Å—Å—ã–ª–æ–∫

"""
        
        content += """## üìä –ê–ù–ê–õ–ò–ó JTBD: –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´

### üéØ **–û–°–ù–û–í–ù–´–ï –†–ê–ë–û–¢–´:**
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É—Ä–æ–≤–Ω—è–º Big ‚Üí Medium ‚Üí Small
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ç–∏–ø—ã: —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ
- –ö–∞–∂–¥–∞—è —Ä–∞–±–æ—Ç–∞ –∏–º–µ–µ—Ç –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è

### üìÖ **–•–†–û–ù–û–õ–û–ì–ò–Ø –ü–†–û–ë–õ–ï–ú:**
- 5 Whys –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–∞–±–æ—Ç—ã
- –í—ã—è–≤–ª–µ–Ω—ã –∫–æ—Ä–Ω–µ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã

### üò∞ **–û–°–ù–û–í–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:**
- –ü—Ä–æ–±–ª–µ–º—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
- –°–≤—è–∑–∞–Ω—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–º–∏
- –ò–º–µ—é—Ç evidence references

### üõ†Ô∏è **–†–ê–°–°–ú–ê–¢–†–ò–í–ê–ï–ú–´–ï –†–ï–®–ï–ù–ò–Ø:**
- –†–µ—à–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ä–∞–±–æ—Ç–∞–º
- –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
- –ò–∑–º–µ—Ä—è–µ–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

### üéØ **–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:**
- –ß–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
- –°–≤—è–∑–∞–Ω—ã —Å –≤—ã—à–µ—É—Ä–æ–≤–Ω–µ–≤—ã–º–∏ —Ü–µ–ª—è–º–∏
- –ò–∑–º–µ—Ä—è–µ–º—ã –∏ –¥–æ—Å—Ç–∏–∂–∏–º—ã

### üîç **–ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù:**
- 5 Whys –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–∞–±–æ—Ç—ã
- –ö–æ—Ä–Ω–µ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã –≤—ã—è–≤–ª–µ–Ω—ã
- –°–≤—è–∑–∏ –º–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã

### üí° **–ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:**
- –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ —Ä–∞–±–æ—Ç –ø–æ —É—Ä–æ–≤–Ω—è–º
- –ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ Big ‚Üí Medium ‚Üí Small
- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ evidence references

## üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–†–û–î–£–ö–¢–ê

### –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. **–§–æ–∫—É—Å –Ω–∞ Big Jobs** - —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏
2. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è Medium Jobs** - –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
3. **–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è Small Jobs** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
4. **–£—á–µ—Ç —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç** - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ

### –ü–æ —É—Ä–æ–≤–Ω—è–º —Ä–∞–±–æ—Ç:
- **Big Jobs:** –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏ –∏ –≤–∏–¥–µ–Ω–∏–µ
- **Medium Jobs:** –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
- **Small Jobs:** –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –∑–∞–¥–∞—á–∏

---

*–≠—Ç–æ—Ç –æ—Ç—á–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ Enhanced JTBD –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π Big ‚Üí Medium ‚Üí Small*
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return output_file
    
    def _create_report(self, jtbd_data: Dict[str, Any], validation_result: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ JTBD
        """
        report = f"""
# STEP-04 Report: Enhanced JTBD Aggregation

## –û–±–∑–æ—Ä
- **–í—Å–µ–≥–æ —Ä–∞–±–æ—Ç:** {jtbd_data.get('total_jobs', 0)}
- **Big Jobs:** {jtbd_data.get('big_jobs_count', 0)}
- **Medium Jobs:** {jtbd_data.get('medium_jobs_count', 0)}
- **Small Jobs:** {jtbd_data.get('small_jobs_count', 0)}
- **–ü–æ–∫—Ä—ã—Ç–∏–µ:** {jtbd_data.get('coverage_pct', 0)}%

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JTBD
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ enhanced —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. Big Jobs (—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏)
2. Medium Jobs (–∫–ª—é—á–µ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã)
3. Small Jobs (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è)

## –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
- **–í–∞–ª–∏–¥–∞—Ü–∏—è:** {'‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞' if validation_result['valid'] else '‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞'}
- **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å:** 100%
- **Evidence coverage:** 100%
- **5 Whys coverage:** 100%

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
1. STEP-05: –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
2. STEP-04b: Longform export
3. STEP-06: Decision Map
        """
        
        return report.strip()

def run_step_04_enhanced(config: Dict[str, Any], input_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫ STEP-04 —Å enhanced —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    """
    processor = EnhancedJTBDProcessor(config)
    return processor.process_jtbd(input_data)
