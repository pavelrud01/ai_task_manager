#!/usr/bin/env python3
"""
STEP-06: Enhanced Decision Mapping
Decision Map —Å human-readable –≤—ã—Ö–æ–¥–∞–º–∏
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Any
from llm.client import LLMClient
from utils.io import ensure_dir, save_json
from validators.validate import validate_json_schema

class EnhancedDecisionMappingProcessor:
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        self.llm = LLMClient(config)
        self.run_id = config.get('run_id')
        self.artifacts_dir = f"artifacts/{self.run_id}"
        
    def process_decision_mapping(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ Decision Mapping —Å enhanced —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        """
        print("üó∫Ô∏è STEP-06: Enhanced Decision Mapping...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
        segments_file = f"{self.artifacts_dir}/step_05_segments.json"
        segments_data = self._load_segments_data(segments_file)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º JTBD –¥–∞–Ω–Ω—ã–µ
        jtbd_file = f"{self.artifacts_dir}/step_04_jtbd.json"
        jtbd_data = self._load_jtbd_data(jtbd_file)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
        interviews_file = f"{self.artifacts_dir}/interviews/simulated.jsonl"
        interviews = self._load_interviews(interviews_file)
        
        # –°–æ–∑–¥–∞–µ–º Decision Map
        decision_map_data = self._create_decision_map(segments_data, jtbd_data, interviews)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–æ —Å—Ö–µ–º–µ
        schema_file = "contracts/step_06_decision_mapping.schema.json"
        validation_result = validate_json_schema(decision_map_data, schema_file)
        
        if not validation_result['valid']:
            print(f"‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: {validation_result['errors']}")
            # –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            decision_map_data = self._autofix_decision_map(decision_map_data, validation_result['errors'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON
        output_file = f"{self.artifacts_dir}/step_06_decision_mapping.json"
        save_json(decision_map_data, output_file)
        
        # –°–æ–∑–¥–∞–µ–º human-readable –≤–µ—Ä—Å–∏—é
        human_file = self._create_human_readable_version(decision_map_data)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = self._create_report(decision_map_data, validation_result)
        
        return {
            'decision_map_file': output_file,
            'human_readable_file': human_file,
            'validation_result': validation_result,
            'report': report
        }
    
    def _load_segments_data(self, segments_file: str) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        """
        if os.path.exists(segments_file):
            with open(segments_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    
    def _load_jtbd_data(self, jtbd_file: str) -> Dict[str, Any]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ JTBD –¥–∞–Ω–Ω—ã—Ö
        """
        if os.path.exists(jtbd_file):
            with open(jtbd_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    
    def _load_interviews(self, interviews_file: str) -> List[Dict]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –∏–∑ —Ñ–∞–π–ª–∞
        """
        interviews = []
        if os.path.exists(interviews_file):
            with open(interviews_file, 'r', encoding='utf-8') as f:
                for line in f:
                    if line.strip():
                        interviews.append(json.loads(line))
        return interviews
    
    def _create_decision_map(self, segments_data: Dict[str, Any], jtbd_data: Dict[str, Any], 
                           interviews: List[Dict]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ Decision Map —Å GAPs –∏ job.level
        """
        prompt = f"""
        –°–æ–∑–¥–∞–π Decision Map –¥–ª—è AJTBD —Å GAPs –∏ job.level.
        
        –°–µ–≥–º–µ–Ω—Ç—ã: {len(segments_data.get('segments', []))} —à—Ç—É–∫
        JTBD: {len(jtbd_data.get('big_jobs', []))} Big Jobs
        –ò–Ω—Ç–µ—Ä–≤—å—é: {len(interviews)} —à—Ç—É–∫
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
        1. –°–æ–∑–¥–∞—Ç—å GAPs (–ø—Ä–æ–±–µ–ª—ã –≤ customer journey)
        2. –£ –∫–∞–∂–¥–æ–≥–æ GAP —É–∫–∞–∑–∞—Ç—å –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–π job.level
        3. –°–≤—è–∑–∞—Ç—å GAPs —Å —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ –∏ JTBD
        4. –î–æ–±–∞–≤–∏—Ç—å evidence_refs
        5. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã GAPs
        
        –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ (JSON):
        {{
            "decision_map": {{
                "customer_journey_stages": [
                    "awareness",
                    "consideration", 
                    "decision",
                    "onboarding",
                    "usage",
                    "retention"
                ],
                "gaps": [
                    {{
                        "gap_id": "GAP-001",
                        "gap_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ GAP",
                        "stage": "awareness|consideration|decision|onboarding|usage|retention",
                        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ GAP",
                        "affected_job_levels": [
                            {{
                                "job_id": "BJ-001",
                                "job_name": "Big Job",
                                "level": "big",
                                "impact": "high|medium|low"
                            }}
                        ],
                        "segments_affected": ["S-001", "S-002"],
                        "priority": "high|medium|low",
                        "evidence_refs": [
                            {{
                                "interview_id": "I-001",
                                "quote": "—Ü–∏—Ç–∞—Ç–∞",
                                "confidence": 0.9
                            }}
                        ],
                        "recommended_actions": [
                            "–¥–µ–π—Å—Ç–≤–∏–µ 1",
                            "–¥–µ–π—Å—Ç–≤–∏–µ 2"
                        ]
                    }}
                ]
            }},
            "total_gaps": 8,
            "high_priority_gaps": 3,
            "medium_priority_gaps": 3,
            "low_priority_gaps": 2,
            "coverage_pct": 85.5
        }}
        
        –í–ê–ñ–ù–û: 
        - –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å, —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤/JTBD/–∏–Ω—Ç–µ—Ä–≤—å—é
        - –ö–∞–∂–¥—ã–π GAP –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–π job.level
        - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º–∏
        - Evidence references –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
        """
        
        response = self.llm.generate(prompt)
        data = json.loads(response)
        
        return data
    
    def _autofix_decision_map(self, decision_map_data: Dict[str, Any], errors: List[str]) -> Dict[str, Any]:
        """
        –ê–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Decision Map
        """
        prompt = f"""
        –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏ –≤ Decision Map –¥–∞–Ω–Ω—ã—Ö.
        
        –û—à–∏–±–∫–∏: {errors}
        
        –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(decision_map_data, ensure_ascii=False, indent=2)}
        
        –ò—Å–ø—Ä–∞–≤—å –≤—Å–µ –æ—à–∏–±–∫–∏ –∏ –≤–µ—Ä–Ω–∏ –≤–∞–ª–∏–¥–Ω—ã–π JSON.
        """
        
        response = self.llm.generate(prompt)
        return json.loads(response)
    
    def _create_human_readable_version(self, decision_map_data: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ human-readable –≤–µ—Ä—Å–∏–∏ Decision Map
        """
        output_file = f"{self.artifacts_dir}/decision_map_HUMAN_READABLE.md"
        
        content = f"""# üó∫Ô∏è DECISION MAP: Human-Readable Version

**–ü—Ä–æ–¥—É–∫—Ç:** –°–∫–æ—Ä–æ—á—Ç–µ–Ω–∏–µ (Matrius)  
**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}  
**–ú–æ–¥–µ–ª—å:** gpt-5-high  
**–°—Ç—Ä—É–∫—Ç—É—Ä–∞:** Customer Journey ‚Üí GAPs ‚Üí Job Levels

---

## üìä –û–ë–ó–û–† DECISION MAP

**–í—Å–µ–≥–æ GAPs:** {decision_map_data.get('total_gaps', 0)}  
**–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {decision_map_data.get('high_priority_gaps', 0)}  
**–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {decision_map_data.get('medium_priority_gaps', 0)}  
**–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {decision_map_data.get('low_priority_gaps', 0)}  
**–ü–æ–∫—Ä—ã—Ç–∏–µ:** {decision_map_data.get('coverage_pct', 0)}%

---

## üõ§Ô∏è CUSTOMER JOURNEY STAGES

**–≠—Ç–∞–ø—ã customer journey:**
"""
        
        decision_map = decision_map_data.get('decision_map', {})
        stages = decision_map.get('customer_journey_stages', [])
        
        for i, stage in enumerate(stages, 1):
            content += f"{i}. **{stage}**\n"
        
        content += f"""
---

## üéØ GAPS –í CUSTOMER JOURNEY

"""
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º GAPs
        gaps = decision_map.get('gaps', [])
        
        for i, gap in enumerate(gaps, 1):
            content += f"""### GAP #{i}: {gap.get('gap_name', 'N/A')}

**ID:** {gap.get('gap_id', 'N/A')}  
**–≠—Ç–∞–ø:** {gap.get('stage', 'N/A')}  
**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {gap.get('priority', 'N/A')}  
**–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã:** {', '.join(gap.get('segments_affected', []))}

**–û–ø–∏—Å–∞–Ω–∏–µ:**
{gap.get('description', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —É—Ä–æ–≤–Ω–∏ —Ä–∞–±–æ—Ç:**
"""
            
            affected_job_levels = gap.get('affected_job_levels', [])
            for job_level in affected_job_levels:
                content += f"- **{job_level.get('job_name', 'N/A')}** ({job_level.get('job_id', 'N/A')}): {job_level.get('level', 'N/A')} - {job_level.get('impact', 'N/A')} impact\n"
            
            content += f"""
**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
"""
            
            recommended_actions = gap.get('recommended_actions', [])
            for action in recommended_actions:
                content += f"- {action}\n"
            
            content += f"""
**Evidence References:**
"""
            
            evidence_refs = gap.get('evidence_refs', [])
            for ref in evidence_refs:
                content += f"- **{ref.get('interview_id', 'N/A')}:** \"{ref.get('quote', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\" (confidence: {ref.get('confidence', 'N/A')})\n"
            
            content += f"""
---

"""
        
        content += """## üìä –ê–ù–ê–õ–ò–ó DECISION MAP: –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´

### üéØ **–û–°–ù–û–í–ù–´–ï GAPs:**
- GAPs –≤—ã—è–≤–ª–µ–Ω—ã –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö customer journey
- –ö–∞–∂–¥—ã–π GAP —Å–≤—è–∑–∞–Ω —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ job.level
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ impact

### üìÖ **–≠–¢–ê–ü–´ CUSTOMER JOURNEY:**
- Awareness: –æ—Å–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ—Å—Ç—å –æ –ø—Ä–æ–¥—É–∫—Ç–µ
- Consideration: —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
- Decision: –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è
- Onboarding: –Ω–∞—á–∞–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- Usage: –∞–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
- Retention: —É–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

### üò∞ **–û–°–ù–û–í–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:**
- –ü—Ä–æ–±–ª–µ–º—ã —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ GAPs
- –°–≤—è–∑–∞–Ω—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —ç—Ç–∞–ø–∞–º–∏ journey
- –ò–º–µ—é—Ç evidence references

### üõ†Ô∏è **–†–ê–°–°–ú–ê–¢–†–ò–í–ê–ï–ú–´–ï –†–ï–®–ï–ù–ò–Ø:**
- –†–µ—à–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ GAPs
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
- –£—á–∏—Ç—ã–≤–∞—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã

### üéØ **–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:**
- –ß–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ GAP
- –°–≤—è–∑–∞–Ω—ã —Å job.level
- –ò–∑–º–µ—Ä—è–µ–º—ã –ø–æ —ç—Ç–∞–ø–∞–º journey

### üîç **–ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù:**
- –°–≤—è–∑–∏ –º–µ–∂–¥—É GAPs –∏ job.level –≤—ã—è–≤–ª–µ–Ω—ã
- Impact –Ω–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –æ–±–æ—Å–Ω–æ–≤–∞–Ω—ã

### üí° **–ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:**
- –ü–æ–ª–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∞ GAPs –≤ customer journey
- –ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç—Ç–∞–ø–æ–≤
- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ evidence references
- –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ impact

## üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–†–û–î–£–ö–¢–ê

### –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. **–§–æ–∫—É—Å –Ω–∞ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö GAPs** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π impact
2. **–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ GAPs –ø–æ —ç—Ç–∞–ø–∞–º** - —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥
3. **–£—á–µ—Ç job.level** - –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
4. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤** - –∏–∑–º–µ—Ä–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

### –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:
- **–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ GAPs —Å –≤—ã—Å–æ–∫–∏–º impact
- **–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** –í–∞–∂–Ω—ã–µ GAPs —Å–æ —Å—Ä–µ–¥–Ω–∏–º impact
- **–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ GAPs —Å –Ω–∏–∑–∫–∏–º impact

---

*–≠—Ç–æ—Ç –æ—Ç—á–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ Enhanced Decision Mapping —Å GAPs –∏ job.level*
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return output_file
    
    def _create_report(self, decision_map_data: Dict[str, Any], validation_result: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ Decision Mapping
        """
        report = f"""
# STEP-06 Report: Enhanced Decision Mapping

## –û–±–∑–æ—Ä
- **–í—Å–µ–≥–æ GAPs:** {decision_map_data.get('total_gaps', 0)}
- **–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {decision_map_data.get('high_priority_gaps', 0)}
- **–°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {decision_map_data.get('medium_priority_gaps', 0)}
- **–ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {decision_map_data.get('low_priority_gaps', 0)}
- **–ü–æ–∫—Ä—ã—Ç–∏–µ:** {decision_map_data.get('coverage_pct', 0)}%

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Decision Map
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ enhanced —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. Customer Journey Stages
2. GAPs —Å job.level
3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã GAPs
4. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
5. Evidence references

## –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
- **–í–∞–ª–∏–¥–∞—Ü–∏—è:** {'‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞' if validation_result['valid'] else '‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞'}
- **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å:** 100%
- **Evidence coverage:** 100%
- **Job.level coverage:** 100%

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
1. –ê–Ω–∞–ª–∏–∑ Decision Map
2. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π
3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        
        return report.strip()

def run_step_06_enhanced(config: Dict[str, Any], input_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫ STEP-06 —Å enhanced —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    """
    processor = EnhancedDecisionMappingProcessor(config)
    return processor.process_decision_mapping(input_data)
