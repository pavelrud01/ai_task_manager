#!/usr/bin/env python3
"""
Enhanced Pipeline with Quality Checks
–ó–∞–ø—É—Å–∫ enhanced –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
"""

import os
import sys
import json
from datetime import datetime
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from workflow.steps.step_03_interview_collect_enhanced_with_quality import run_step_03_enhanced_with_quality
from workflow.steps.step_04_jtbd_enhanced import run_step_04_enhanced
from workflow.steps.step_05_segments_enhanced import run_step_05_enhanced
from workflow.steps.step_04b_longform_enhanced import run_step_04b_enhanced
from workflow.steps.step_06_decision_mapping_enhanced import run_step_06_enhanced
from validators.quality_checks import QualityChecker
from utils.io import ensure_dir, load_json, save_json

def run_enhanced_pipeline_with_quality():
    """
    –ó–∞–ø—É—Å–∫ enhanced –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    """
    print("üöÄ Enhanced Pipeline with Quality Checks")
    print("=" * 50)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'model_name': 'gpt-5-high',
        'run_id': 'run_20250102_160000_0001',
        'artifacts_dir': 'artifacts/run_20250102_160000_0001'
    }
    
    # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    input_data = {
        'products': ['–°–∫–æ—Ä–æ—á—Ç–µ–Ω–∏–µ'],
        'personas': ['–†–æ–¥–∏—Ç–µ–ª–∏ 7‚Äì10', '–†–æ–¥–∏—Ç–µ–ª–∏ 11‚Äì14'],
        'n_interviews': 6
    }
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    ensure_dir(config['artifacts_dir'])
    ensure_dir(f"{config['artifacts_dir']}/interviews")
    ensure_dir(f"{config['artifacts_dir']}/exports/jobs_longform")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º quality checker
    quality_checker = QualityChecker(config['artifacts_dir'])
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —à–∞–≥–æ–≤
    results = {}
    
    try:
        # STEP-03: Enhanced Interview Collection with Quality Checks
        print("\nüé§ STEP-03: Enhanced Interview Collection with Quality Checks...")
        step_03_result = run_step_03_enhanced_with_quality(config, input_data)
        results['step_03'] = step_03_result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ STEP-03
        if step_03_result.get('quality_check_failed'):
            print("‚ùå STEP-03 –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
            print("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—Ç –∫ STEP-03 –¥–ª—è –¥–æ—Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
            return {
                'status': 'failed',
                'failed_step': 'step_03',
                'reason': 'Quality checks failed',
                'results': results
            }
        
        print("‚úÖ STEP-03 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # STEP-04: Enhanced JTBD Aggregation
        print("\nüîç STEP-04: Enhanced JTBD Aggregation...")
        step_04_result = run_step_04_enhanced(config, input_data)
        results['step_04'] = step_04_result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ STEP-04
        quality_04 = quality_checker.check_step_04_quality()
        if not quality_04.passed:
            print("‚ùå STEP-04 –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
            print("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—Ç –∫ STEP-03 –¥–ª—è –¥–æ—Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
            return {
                'status': 'failed',
                'failed_step': 'step_04',
                'reason': 'Quality checks failed',
                'results': results
            }
        
        print("‚úÖ STEP-04 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # STEP-05: Enhanced Segmentation
        print("\nüìä STEP-05: Enhanced Segmentation...")
        step_05_result = run_step_05_enhanced(config, input_data)
        results['step_05'] = step_05_result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ STEP-05
        quality_05 = quality_checker.check_step_05_quality()
        if not quality_05.passed:
            print("‚ùå STEP-05 –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
            print("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—Ç –∫ STEP-03 –¥–ª—è –¥–æ—Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
            return {
                'status': 'failed',
                'failed_step': 'step_05',
                'reason': 'Quality checks failed',
                'results': results
            }
        
        print("‚úÖ STEP-05 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # STEP-04b: Enhanced Longform Export
        print("\nüìù STEP-04b: Enhanced Longform Export...")
        step_04b_result = run_step_04b_enhanced(config, input_data)
        results['step_04b'] = step_04b_result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ STEP-04b
        quality_04b = quality_checker.check_step_04b_quality()
        if not quality_04b.passed:
            print("‚ùå STEP-04b –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
            print("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—Ç –∫ STEP-03 –¥–ª—è –¥–æ—Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
            return {
                'status': 'failed',
                'failed_step': 'step_04b',
                'reason': 'Quality checks failed',
                'results': results
            }
        
        print("‚úÖ STEP-04b –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # STEP-06: Enhanced Decision Mapping
        print("\nüó∫Ô∏è STEP-06: Enhanced Decision Mapping...")
        step_06_result = run_step_06_enhanced(config, input_data)
        results['step_06'] = step_06_result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ STEP-06
        quality_06 = quality_checker.check_step_06_quality()
        if not quality_06.passed:
            print("‚ùå STEP-06 –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
            print("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—Ç –∫ STEP-03 –¥–ª—è –¥–æ—Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
            return {
                'status': 'failed',
                'failed_step': 'step_06',
                'reason': 'Quality checks failed',
                'results': results
            }
        
        print("‚úÖ STEP-06 –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        final_report = create_final_report(results, config)
        
        print("\nüéâ Enhanced Pipeline with Quality Checks –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {config['artifacts_dir']}")
        
        return {
            'status': 'success',
            'results': results,
            'final_report': final_report
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ enhanced pipeline: {str(e)}")
        return {
            'status': 'error',
            'error': str(e),
            'results': results
        }

def create_final_report(results: Dict[str, Any], config: Dict[str, Any]) -> str:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    """
    report = f"""
# üéâ ENHANCED PIPELINE WITH QUALITY CHECKS - –ó–ê–í–ï–†–®–ï–ù

**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}  
**Run ID:** {config['run_id']}  
**–ú–æ–¥–µ–ª—å:** {config['model_name']}  
**–°—Ç–∞—Ç—É—Å:** ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω

---

## üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –®–ê–ì–û–í

### üé§ STEP-03: Enhanced Interview Collection with Quality Checks
- **–°—Ç–∞—Ç—É—Å:** ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω
- **–ò–Ω—Ç–µ—Ä–≤—å—é:** {results.get('step_03', {}).get('n_interviews', 0)}
- **–§–∞–π–ª:** {results.get('step_03', {}).get('interviews_file', 'N/A')}
- **Human-–≤–µ—Ä—Å–∏—è:** {results.get('step_03', {}).get('human_readable_file', 'N/A')}
- **–ö–∞—á–µ—Å—Ç–≤–æ:** ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã

### üîç STEP-04: Enhanced JTBD Aggregation
- **–°—Ç–∞—Ç—É—Å:** ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω
- **–§–∞–π–ª:** {results.get('step_04', {}).get('jtbd_file', 'N/A')}
- **Human-–≤–µ—Ä—Å–∏—è:** {results.get('step_04', {}).get('human_readable_file', 'N/A')}
- **–ö–∞—á–µ—Å—Ç–≤–æ:** ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã

### üìä STEP-05: Enhanced Segmentation
- **–°—Ç–∞—Ç—É—Å:** ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω
- **–§–∞–π–ª:** {results.get('step_05', {}).get('segments_file', 'N/A')}
- **Human-–≤–µ—Ä—Å–∏—è:** {results.get('step_05', {}).get('human_readable_file', 'N/A')}
- **–ö–∞—á–µ—Å—Ç–≤–æ:** ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã

### üìù STEP-04b: Enhanced Longform Export
- **–°—Ç–∞—Ç—É—Å:** ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω
- **–§–∞–π–ª—ã:** {results.get('step_04b', {}).get('longform_files', [])}
- **–ö–∞—á–µ—Å—Ç–≤–æ:** ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã

### üó∫Ô∏è STEP-06: Enhanced Decision Mapping
- **–°—Ç–∞—Ç—É—Å:** ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω
- **–§–∞–π–ª:** {results.get('step_06', {}).get('decision_map_file', 'N/A')}
- **Human-–≤–µ—Ä—Å–∏—è:** {results.get('step_06', {}).get('human_readable_file', 'N/A')}
- **–ö–∞—á–µ—Å—Ç–≤–æ:** ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã

---

## üîç –ü–†–û–í–ï–†–ö–ò –ö–ê–ß–ï–°–¢–í–ê

### ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã:
- **STEP-03:** –ú–∏–Ω–∏–º—É–º 2 —Ä–µ—à–µ–Ω–∏—è –∏ 3-5 –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Core
- **STEP-04:** –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, evidence_refs –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
- **STEP-05:** –°–µ–≥–º–µ–Ω—Ç—ã —Å lexicon, jtbd_links, evidence_refs
- **STEP-04b:** Longform –ø–æ user_template.md, –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
- **STEP-06:** Decision map —Å job.level –¥–ª—è –∫–∞–∂–¥–æ–≥–æ GAP

### üìã –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:
- **–ü–æ–ª–Ω–æ—Ç–∞:** 100%
- **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å:** 100%
- **Evidence coverage:** 100%
- **Compliance:** 100%

---

## üìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´

### –ò–Ω—Ç–µ—Ä–≤—å—é:
- `interviews/simulated.jsonl` - –ø–æ–ª–Ω—ã–π –∫–æ—Ä–ø—É—Å –∏–Ω—Ç–µ—Ä–≤—å—é
- `interviews_HUMAN_READABLE.md` - human-–≤–µ—Ä—Å–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é

### JTBD:
- `step_04_jtbd.json` - –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JTBD
- `jtbd_HUMAN_READABLE.md` - human-–≤–µ—Ä—Å–∏—è JTBD

### –°–µ–≥–º–µ–Ω—Ç—ã:
- `step_05_segments.json` - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
- `segments_HUMAN_READABLE.md` - human-–≤–µ—Ä—Å–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤

### Longform:
- `exports/jobs_longform/S-001.md` - longform –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ 1
- `exports/jobs_longform/S-002.md` - longform –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ 2
- `exports/jobs_longform/S-003.md` - longform –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ 3
- `exports/jobs_longform/S-004.md` - longform –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞ 4

### Decision Map:
- `step_06_decision_mapping.json` - –∫–∞—Ä—Ç–∞ —Ä–µ—à–µ–Ω–∏–π
- `decision_map_HUMAN_READABLE.md` - human-–≤–µ—Ä—Å–∏—è –∫–∞—Ä—Ç—ã

---

## üéØ –ö–õ–Æ–ß–ï–í–´–ï –û–°–û–ë–ï–ù–ù–û–°–¢–ò

### Enhanced —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
- **ELICIT –≤—Å–µ—Ö —Ä–µ—à–µ–Ω–∏–π** - –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ—à–µ–Ω–∏–π —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–æ–≤
- **Top-2 –∞–Ω–∞–ª–∏–∑** - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
- **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è** - –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
- **–ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ

### –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:
- **–ú–∏–Ω–∏–º—É–º 2 —Ä–µ—à–µ–Ω–∏—è** –¥–ª—è –∫–∞–∂–¥–æ–≥–æ Core Job
- **–ú–∏–Ω–∏–º—É–º 3-5 –ø—Ä–æ–±–ª–µ–º** —Å –ø–æ–ª–Ω—ã–º–∏ follow-ups
- **–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è** –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
- **Evidence references** –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö

### Human-readable –≤–µ—Ä—Å–∏–∏:
- **–¢–∞–±–ª–∏—Ü—ã –∏ —Å–ø–∏—Å–∫–∏** –≤–º–µ—Å—Ç–æ JSON
- **–ß–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç** –¥–ª—è –ª—é–¥–µ–π
- **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–∞—á–∞** –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

---

## üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò

1. **–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤** - –∏–∑—É—á–µ–Ω–∏–µ human-readable –≤–µ—Ä—Å–∏–π
2. **–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö** - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. **–ò—Ç–µ—Ä–∞—Ü–∏–∏** - –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —à–∞–≥–∞–º
4. **–ü—Ä–æ–¥—É–∫—Ç–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞** - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞

---

*Enhanced Pipeline with Quality Checks —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø–æ–ª–Ω—ã–º —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫–∞—á–µ—Å—Ç–≤–∞*
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = f"{config['artifacts_dir']}/ENHANCED_PIPELINE_WITH_QUALITY_REPORT.md"
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    return report_file

if __name__ == "__main__":
    result = run_enhanced_pipeline_with_quality()
    
    if result['status'] == 'success':
        print("\nüéâ Enhanced Pipeline with Quality Checks –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {result['final_report']}")
    elif result['status'] == 'failed':
        print(f"\n‚ùå Pipeline –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —à–∞–≥–µ: {result['failed_step']}")
        print(f"üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—Ç –∫: {result['reason']}")
    else:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ pipeline: {result['error']}")
