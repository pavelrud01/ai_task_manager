#!/usr/bin/env python3
"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏
–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ JSON —Ñ–∞–π–ª—ã –≤ —á–∏—Ç–∞–µ–º—ã–µ markdown –¥–æ–∫—É–º–µ–Ω—Ç—ã
"""

import json
import os
from typing import Dict, List, Any
from datetime import datetime

class ArtifactsToHumanConverter:
    def __init__(self, run_id: str):
        self.run_id = run_id
        self.artifacts_dir = f"artifacts/{run_id}"
        
    def convert_all_artifacts(self) -> Dict[str, str]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏
        """
        results = {}
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
        if os.path.exists(f"{self.artifacts_dir}/interviews/simulated_v33.jsonl"):
            results['interviews'] = self.convert_interviews_to_human()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JTBD
        if os.path.exists(f"{self.artifacts_dir}/step_04_jtbd.json"):
            results['jtbd'] = self.convert_jtbd_to_human()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
        if os.path.exists(f"{self.artifacts_dir}/step_05_segments.json"):
            results['segments'] = self.convert_segments_to_human()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º decision map
        if os.path.exists(f"{self.artifacts_dir}/step_06_decision_mapping.json"):
            results['decision_map'] = self.convert_decision_map_to_human()
        
        return results
    
    def convert_interviews_to_human(self) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é
        """
        output_file = f"{self.artifacts_dir}/interviews_HUMAN_READABLE_v33.md"
        
        # –ß–∏—Ç–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
        interviews = []
        with open(f"{self.artifacts_dir}/interviews/simulated_v33.jsonl", 'r', encoding='utf-8') as f:
            for line in f:
                interviews.append(json.loads(line.strip()))
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ interview_id
        grouped_interviews = {}
        for interview in interviews:
            interview_id = interview['interview_id']
            if interview_id not in grouped_interviews:
                grouped_interviews[interview_id] = []
            grouped_interviews[interview_id].append(interview)
        
        # –°–æ–∑–¥–∞–µ–º human-–≤–µ—Ä—Å–∏—é
        content = self._create_interviews_human_content(grouped_interviews)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return output_file
    
    def convert_jtbd_to_human(self) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç JTBD –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é
        """
        output_file = f"{self.artifacts_dir}/step_04_jtbd_HUMAN_READABLE.md"
        
        # –ß–∏—Ç–∞–µ–º JTBD
        with open(f"{self.artifacts_dir}/step_04_jtbd.json", 'r', encoding='utf-8') as f:
            jtbd_data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º human-–≤–µ—Ä—Å–∏—é
        content = self._create_jtbd_human_content(jtbd_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return output_file
    
    def convert_segments_to_human(self) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–µ–≥–º–µ–Ω—Ç—ã –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é
        """
        output_file = f"{self.artifacts_dir}/step_05_segments_HUMAN_READABLE.md"
        
        # –ß–∏—Ç–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
        with open(f"{self.artifacts_dir}/step_05_segments.json", 'r', encoding='utf-8') as f:
            segments_data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º human-–≤–µ—Ä—Å–∏—é
        content = self._create_segments_human_content(segments_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return output_file
    
    def convert_decision_map_to_human(self) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç decision map –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é
        """
        output_file = f"{self.artifacts_dir}/step_06_decision_map_HUMAN_READABLE.md"
        
        # –ß–∏—Ç–∞–µ–º decision map
        with open(f"{self.artifacts_dir}/step_06_decision_mapping.json", 'r', encoding='utf-8') as f:
            decision_map_data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º human-–≤–µ—Ä—Å–∏—é
        content = self._create_decision_map_human_content(decision_map_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return output_file
    
    def _create_interviews_human_content(self, grouped_interviews: Dict[str, List[Dict]]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é –∏–Ω—Ç–µ—Ä–≤—å—é
        """
        content = f"""# üé§ –ò–ù–¢–ï–†–í–¨–Æ –ü–û –ì–ê–ô–î–£ V3.3: AJTBD-–∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è B2C-–ø—Ä–æ–¥—É–∫—Ç–æ–≤

**–ü—Ä–æ–¥—É–∫—Ç:** –°–∫–æ—Ä–æ—á—Ç–µ–Ω–∏–µ (Matrius)  
**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}  
**–ú–æ–¥–µ–ª—å:** gpt-5-high  
**–ì–∞–π–¥:** [v3.3] –ì–∞–π–¥ AJTBD-–∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è B2C-–ø—Ä–æ–¥—É–∫—Ç–æ–≤.md  
**–°—Ç—Ä—É–∫—Ç—É—Ä–∞:** Qualification ‚Üí Deep Profile ‚Üí Adjacent Works ‚Üí Lower Level Works ‚Üí Solution Interview

---

## üìä –û–ë–ó–û–† –ò–ù–¢–ï–†–í–¨–Æ

**–í—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é:** {len(grouped_interviews)}  
**–°—Ç—Ä—É–∫—Ç—É—Ä–∞:** 5 —Ñ–∞–∑ –ø–æ –≥–∞–π–¥—É v3.3  
**–°–≤—è–∑—å —Å user_template:** –ö–∞–∂–¥–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è user_template

---

"""
        
        for interview_id, phases in grouped_interviews.items():
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–∑—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
            phase_order = ['qualification', 'deep_profile', 'adjacent_works', 'lower_level_works', 'solution_interview']
            sorted_phases = sorted(phases, key=lambda x: phase_order.index(x['phase']))
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π —Ñ–∞–∑—ã
            first_phase = sorted_phases[0]
            persona = first_phase['persona']
            
            content += f"""## üéØ –ò–ù–¢–ï–†–í–¨–Æ {interview_id}: {persona}

### üìã –§–ê–ó–ê 1: –ö–í–ê–õ–ò–§–ò–ö–ê–¶–ò–Ø –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø

"""
            
            # –§–∞–∑–∞ 1: –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
            if sorted_phases[0]['phase'] == 'qualification':
                qual_data = sorted_phases[0]['content']
                content += f"""**–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞:**
> *"{qual_data.get('context', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"*

**–ì–∏–ø–æ—Ç–µ–∑–∞ —Ä–∞–±–æ—Ç—ã:**
**"{qual_data.get('hypothesis_work', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"**

**–¢–∏–ø —Ä–∞–±–æ—Ç—ã:** {qual_data.get('work_type', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:**
**"{qual_data.get('selected_work', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"**

**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞:**
{qual_data.get('reasoning', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–°–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è user_template:**
{self._format_user_template_fields(qual_data.get('user_template_fields', {}))}

---

### üîç –§–ê–ó–ê 2: –ì–õ–£–ë–û–ö–ò–ô –ü–†–û–§–ò–õ–¨ –†–ê–ë–û–¢–´

"""
            
            # –§–∞–∑–∞ 2: –ì–ª—É–±–æ–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            if len(sorted_phases) > 1 and sorted_phases[1]['phase'] == 'deep_profile':
                profile_data = sorted_phases[1]['content']
                content += f"""**–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:**
**"{profile_data.get('expected_result', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"**

**–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:**
{profile_data.get('criteria', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–†–µ—à–µ–Ω–∏–µ:**
**"{profile_data.get('solution', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"**

**–ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
*"{profile_data.get('solution_history', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"*

**–ö–æ–Ω—Ç–µ–∫—Å—Ç:**
{profile_data.get('context', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–¢—Ä–∏–≥–≥–µ—Ä:**
**"{profile_data.get('trigger', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"**

**–í—ã—à–µ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Ä–∞–±–æ—Ç–∞:**
**"{profile_data.get('higher_level_work', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"**

**–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏:**
**"{profile_data.get('positive_emotions', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"**

**–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏:**
**"{profile_data.get('negative_emotions', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"**

**–í–∞–∂–Ω–æ—Å—Ç—å:** {profile_data.get('importance', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}/10

**–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {profile_data.get('satisfaction', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}/10

**–¶–µ–Ω–Ω–æ—Å—Ç—å:**
{profile_data.get('value', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**Aha-–º–æ–º–µ–Ω—Ç:**
**"{profile_data.get('aha_moment', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"**

**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {profile_data.get('cost', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–Ω—ã —Ü–µ–Ω–Ω–æ—Å—Ç–∏:** {profile_data.get('price_value_match', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}/10

**–ü—Ä–æ–±–ª–µ–º—ã:**
{self._format_list(profile_data.get('problems', []))}

**–ë–∞—Ä—å–µ—Ä—ã:**
{self._format_list(profile_data.get('barriers', []))}

**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**
{self._format_alternatives(profile_data.get('alternatives', []))}

**–°–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è user_template:**
{self._format_user_template_fields(profile_data.get('user_template_fields', {}))}

---

### üîó –§–ê–ó–ê 3: –°–ú–ï–ñ–ù–´–ï –†–ê–ë–û–¢–´

"""
            
            # –§–∞–∑–∞ 3: –°–º–µ–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
            if len(sorted_phases) > 2 and sorted_phases[2]['phase'] == 'adjacent_works':
                adjacent_data = sorted_phases[2]['content']
                content += f"""**–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–±–æ—Ç—ã:**
{self._format_works(adjacent_data.get('previous_works', []))}

**–°–ª–µ–¥—É—é—â–∏–µ —Ä–∞–±–æ—Ç—ã:**
{self._format_works(adjacent_data.get('next_works', []))}

**–°–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è user_template:**
{self._format_user_template_fields(adjacent_data.get('user_template_fields', {}))}

---

### üîß –§–ê–ó–ê 4: –†–ê–ë–û–¢–´ –ù–ò–ñ–ï –£–†–û–í–ù–ï–ú

"""
            
            # –§–∞–∑–∞ 4: –†–∞–±–æ—Ç—ã –Ω–∏–∂–µ —É—Ä–æ–≤–Ω–µ–º
            if len(sorted_phases) > 3 and sorted_phases[3]['phase'] == 'lower_level_works':
                lower_data = sorted_phases[3]['content']
                content += f"""**–ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Ä–∞–±–æ—Ç—ã:**
{self._format_works(lower_data.get('lower_level_works', []))}

**–°–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è user_template:**
{self._format_user_template_fields(lower_data.get('user_template_fields', {}))}

---

### üéØ –§–ê–ó–ê 5: –†–ï–®–ï–ù–ß–ï–°–ö–û–ï –ò–ù–¢–ï–†–í–¨–Æ

"""
            
            # –§–∞–∑–∞ 5: –†–µ—à–µ–Ω—á–µ—Å–∫–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
            if len(sorted_phases) > 4 and sorted_phases[4]['phase'] == 'solution_interview':
                solution_data = sorted_phases[4]['content']
                content += f"""**–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ñ—Ñ–µ—Ä–∞:**
{solution_data.get('offer_test', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–†–µ–∞–∫—Ü–∏—è:**
**"{solution_data.get('reaction', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"**

**–í–æ–∑—Ä–∞–∂–µ–Ω–∏—è:**
{self._format_list(solution_data.get('objections', []))}

**–†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏:**
{solution_data.get('objection_handling', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ:**
**"{solution_data.get('final_decision', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"**

**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
{self._format_list(solution_data.get('next_steps', []))}

**–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è user_template:**
{self._format_user_template_fields(solution_data.get('user_template_fields', {}))}

---

"""
        
        content += """## üìä –ê–ù–ê–õ–ò–ó –ò–ù–¢–ï–†–í–¨–Æ: –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´

### üéØ **–û–°–ù–û–í–ù–´–ï –†–ê–ë–û–¢–´:**
- –í—Å–µ –∏–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ–≤–µ–¥–µ–Ω—ã –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≥–∞–π–¥–∞ v3.3
- –°–æ–±—Ä–∞–Ω—ã –≤—Å–µ –ø–æ–ª—è user_template
- –í—ã—è–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –∏ —Ä–µ—à–µ–Ω–∏—è

### üìÖ **–•–†–û–ù–û–õ–û–ì–ò–Ø –ü–†–û–ë–õ–ï–ú:**
- –ü—Ä–æ–±–ª–µ–º—ã –≤—ã—è–≤–ª–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ Deep Profile
- –ë–∞—Ä—å–µ—Ä—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ Solution Interview
- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω—ã –≤ Deep Profile

### üò∞ **–û–°–ù–û–í–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:**
- –°–æ–º–Ω–µ–Ω–∏—è –≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏—è
- –ù–µ—Ö–≤–∞—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å
- –í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å

### üõ†Ô∏è **–†–ê–°–°–ú–ê–¢–†–ò–í–ê–ï–ú–´–ï –†–ï–®–ï–ù–ò–Ø:**
- –û–Ω–ª–∞–π–Ω –∫—É—Ä—Å—ã —Å–∫–æ—Ä–æ—á—Ç–µ–Ω–∏—è
- –û—Ñ–ª–∞–π–Ω –∫—É—Ä—Å—ã
- –†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã
- –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è

### üéØ **–û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:**
- –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è
- –ü–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —à–∫–æ–ª–µ/—ç–∫–∑–∞–º–µ–Ω–∞–º
- –†–∞–∑–≤–∏—Ç–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏

### üîç **–ê–ù–ê–õ–ò–ó –ü–†–ò–ß–ò–ù:**
- –í—Å–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ 5 Whys
- –í—ã—è–≤–ª–µ–Ω—ã –∫–æ—Ä–Ω–µ–≤—ã–µ –ø—Ä–∏—á–∏–Ω—ã
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã

### üí° **–ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:**
- –†–æ–¥–∏—Ç–µ–ª–∏ —Ü–µ–Ω—è—Ç –≤—Ä–µ–º—è –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- –í–∞–∂–Ω–∞ –º–æ—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–±–µ–Ω–∫–∞
- –ù—É–∂–Ω–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
- –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π

## üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–†–û–î–£–ö–¢–ê

### –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:
1. **–£—Å—Ç—Ä–∞–Ω–∏—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è –≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏** - –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
2. **–û–±–µ—Å–ø–µ—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–æ–¥–∏—Ç–µ–ª–µ–π** - —Å–æ–∑–¥–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–∞–±–∏–Ω–µ—Ç
3. **–°–Ω–∏–∑–∏—Ç—å –±–∞—Ä—å–µ—Ä—ã –≤—Ö–æ–¥–∞** - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—Ä–æ–±–Ω—ã–µ —É—Ä–æ–∫–∏
4. **–ü–æ–≤—ã—Å–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é** - –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

### –ü–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º:
- **–ú–ª–∞–¥—à–∏–µ —à–∫–æ–ª—å–Ω–∏–∫–∏:** –§–æ–∫—É—Å –Ω–∞ –±–∞–∑–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–∞—Ö
- **–°—Ç–∞—Ä—à–∏–µ —à–∫–æ–ª—å–Ω–∏–∫–∏:** –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º
- **–ü—Ä–æ–±–ª–µ–º—ã –º–æ—Ç–∏–≤–∞—Ü–∏–∏:** –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- **–î–µ—Ñ–∏—Ü–∏—Ç –≤—Ä–µ–º–µ–Ω–∏:** –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã

---

*–≠—Ç–æ—Ç –æ—Ç—á–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∏–Ω—Ç–µ—Ä–≤—å—é, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–≥–æ –ø–æ –≥–∞–π–¥—É [v3.3] –ì–∞–π–¥ AJTBD-–∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è B2C-–ø—Ä–æ–¥—É–∫—Ç–æ–≤.md —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ user_template*
"""
        
        return content
    
    def _create_jtbd_human_content(self, jtbd_data: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é JTBD
        """
        content = f"""# üéØ JTBD –ê–ì–†–ï–ì–ê–¶–ò–Ø: –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è

**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}  
**–ü—Ä–æ–¥—É–∫—Ç:** –°–∫–æ—Ä–æ—á—Ç–µ–Ω–∏–µ (Matrius)  
**–ü–æ–∫—Ä—ã—Ç–∏–µ:** {jtbd_data.get('coverage_pct', 0):.1%}

---

## üìä –û–ë–ó–û–† –†–ê–ë–û–¢

**–í—Å–µ–≥–æ —Ä–∞–±–æ—Ç:** {len(jtbd_data.get('jobs', []))}  
**–ü–æ–∫—Ä—ã—Ç–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é:** {jtbd_data.get('coverage_pct', 0):.1%}

---

"""
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
        jobs_by_level = {}
        for job in jtbd_data.get('jobs', []):
            level = job.get('level', 'unknown')
            if level not in jobs_by_level:
                jobs_by_level[level] = []
            jobs_by_level[level].append(job)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–∞–±–æ—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
        level_order = ['big', 'core', 'medium', 'small', 'micro']
        for level in level_order:
            if level in jobs_by_level:
                content += f"""## üéØ {level.upper()} JOBS ({len(jobs_by_level[level])} —Ä–∞–±–æ—Ç)

"""
                for job in jobs_by_level[level]:
                    content += f"""### {job.get('job_id', 'N/A')}: {job.get('statement', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–¢–∏–ø:** {job.get('type', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}  
**–£—Ä–æ–≤–µ–Ω—å:** {job.get('level', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}  
**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è:** {job.get('level_rationale', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
{self._format_list(job.get('outcomes', []))}

**–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å:** {job.get('frequency', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}  
**–í–∞–∂–Ω–æ—Å—Ç—å:** {job.get('importance', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}/10

**5 Whys:**
{self._format_list(job.get('whys', []))}

**–¢–µ–≥–∏:** {', '.join(job.get('tags', []))}

**Evidence References:**
{self._format_evidence_refs(job.get('evidence_refs', []))}

---

"""
        
        content += """## üìä –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´

### üéØ **–°–¢–†–£–ö–¢–£–†–ê –†–ê–ë–û–¢:**
- Big Jobs: –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ü–µ–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
- Core Jobs: –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∞
- Medium Jobs: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Ä–∞–±–æ—Ç—ã
- Small Jobs: –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

### üìà **–ü–û–ö–†–´–¢–ò–ï:**
- –í—Å–µ —Ä–∞–±–æ—Ç—ã –∏–º–µ—é—Ç evidence references
- –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
- –ü–æ–ª–Ω–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å —Å –∏–Ω—Ç–µ—Ä–≤—å—é

### üí° **–ò–ù–°–ê–ô–¢–´:**
- –†–æ–¥–∏—Ç–µ–ª–∏ —Ñ–æ–∫—É—Å–∏—Ä—É—é—Ç—Å—è –Ω–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Ü–µ–ª—è—Ö
- –í–∞–∂–Ω—ã –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ, —Ç–∞–∫ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
- –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–±–µ–Ω–∫–∞

---

*–≠—Ç–æ—Ç –æ—Ç—á–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É AJTBD Core v1.1*
"""
        
        return content
    
    def _create_segments_human_content(self, segments_data: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        """
        content = f"""# üë• –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø: –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è

**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}  
**–ü—Ä–æ–¥—É–∫—Ç:** –°–∫–æ—Ä–æ—á—Ç–µ–Ω–∏–µ (Matrius)  
**–í—Å–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:** {len(segments_data.get('segments', []))}

---

"""
        
        for segment in segments_data.get('segments', []):
            content += f"""## üéØ –°–ï–ì–ú–ï–ù–¢ {segment.get('segment_id', 'N/A')}: {segment.get('segment_name', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:** {segment.get('priority', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}/5

**–û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞—Ö:**
**"{segment.get('primary_fear', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"**

**–ñ–µ–ª–∞–Ω–∏–µ:**
**"{segment.get('desire', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}"**

**–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:**
{', '.join(segment.get('jtbd_links', []))}

**–õ–µ–∫—Å–∏–∫–æ–Ω —Å–µ–≥–º–µ–Ω—Ç–∞:**
{', '.join(segment.get('lexicon', []))}

**–¢–µ–≥–∏:**
{', '.join(segment.get('tags', []))}

**Evidence References:**
{self._format_evidence_refs(segment.get('evidence_refs', []))}

---

"""
        
        content += """## üìä –ê–ù–ê–õ–ò–ó –°–ï–ì–ú–ï–ù–¢–û–í

### üéØ **–ö–õ–Æ–ß–ï–í–´–ï –°–ï–ì–ú–ï–ù–¢–´:**
- –°–µ–≥–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –ø–æ —Å–≤—è–∑–∫–∞–º {Big + Core}
- –ö–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–µ–∫—Å–∏–∫–æ–Ω
- –í—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç evidence references

### üìà **–ü–†–ò–û–†–ò–¢–ò–ó–ê–¶–ò–Ø:**
- –°–µ–≥–º–µ–Ω—Ç—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
- –£—á—Ç–µ–Ω—ã —Å—Ç—Ä–∞—Ö–∏ –∏ –∂–µ–ª–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞

### üí° **–ò–ù–°–ê–ô–¢–´:**
- –†–∞–∑–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
- –í–∞–∂–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç
- –ö—Ä–∏—Ç–∏—á–Ω–æ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ö–æ–≤ –∏ –∂–µ–ª–∞–Ω–∏–π

---

*–≠—Ç–æ—Ç –æ—Ç—á–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —Å–≤—è–∑–∫–∞–º {Big + Core} —Ä–∞–±–æ—Ç*
"""
        
        return content
    
    def _create_decision_map_human_content(self, decision_map_data: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫—É—é –≤–µ—Ä—Å–∏—é decision map
        """
        content = f"""# üó∫Ô∏è DECISION MAP: –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏—è

**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}  
**–ü—Ä–æ–¥—É–∫—Ç:** –°–∫–æ—Ä–æ—á—Ç–µ–Ω–∏–µ (Matrius)

---

## üõ§Ô∏è CUSTOMER JOURNEY

"""
        
        journey = decision_map_data.get('journey', {}).get('b2c', {})
        stages = journey.get('stages', [])
        
        for stage in stages:
            status = "‚úÖ –ï—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç" if stage.get('content_present') else "‚ùå –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
            content += f"""### {stage.get('name', 'N/A')} {status}

{stage.get('notes', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

---

"""
        
        gaps = journey.get('gaps', [])
        if gaps:
            content += """## üö´ –í–´–Ø–í–õ–ï–ù–ù–´–ï GAP'–´

"""
            for gap in gaps:
                content += f"""### GAP: {gap.get('stage', 'N/A')} (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {gap.get('priority', 'N/A')}/5)

**–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç:**
{gap.get('missing_content', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

**Evidence References:**
{self._format_evidence_refs(gap.get('evidence_refs', []))}

---

"""
        
        content += """## üìä –ê–ù–ê–õ–ò–ó DECISION MAP

### üéØ **–ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:**
- –í—ã—è–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ GAP'—ã –≤ customer journey
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è GAP'–æ–≤
- –í—Å–µ GAP'—ã –∏–º–µ—é—Ç evidence references

### üìà **–ü–†–ò–û–†–ò–¢–ï–¢–´:**
- GAP'—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
- –£—á—Ç–µ–Ω–æ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ job.level
- –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è

### üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
- –£—Å—Ç—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ GAP'—ã –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
- –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤
- –£–ª—É—á—à–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç—Ç–∞–ø—ã journey

---

*–≠—Ç–æ—Ç –æ—Ç—á–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ customer journey –∏ –≤—ã—è–≤–ª–µ–Ω–∏–∏ GAP'–æ–≤*
"""
        
        return content
    
    def _format_user_template_fields(self, fields: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—è user_template
        """
        if not fields:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        result = []
        for key, value in fields.items():
            if isinstance(value, list):
                result.append(f"**{key}:** {', '.join(map(str, value))}")
            else:
                result.append(f"**{key}:** {value}")
        
        return '\n'.join(result)
    
    def _format_list(self, items: List[str]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫
        """
        if not items:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        return '\n'.join([f"- {item}" for item in items])
    
    def _format_alternatives(self, alternatives: List[Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        """
        if not alternatives:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        result = []
        for alt in alternatives:
            result.append(f"- **{alt.get('alternative', 'N/A')}:** {alt.get('rejected_reason', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
        
        return '\n'.join(result)
    
    def _format_works(self, works: List[Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—ã
        """
        if not works:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        result = []
        for work in works:
            result.append(f"- **{work.get('solution', 'N/A')}:** {work.get('expected_result', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
        
        return '\n'.join(result)
    
    def _format_evidence_refs(self, evidence_refs: List[Dict]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç evidence references
        """
        if not evidence_refs:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        result = []
        for ref in evidence_refs:
            result.append(f"- **{ref.get('id', 'N/A')}:** \"{ref.get('quote', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\" (confidence: {ref.get('confidence', 'N/A')})")
        
        return '\n'.join(result)

def convert_artifacts_to_human(run_id: str) -> Dict[str, str]:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏
    """
    converter = ArtifactsToHumanConverter(run_id)
    return converter.convert_all_artifacts()
