"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞ –≤ AI Marketing Agent.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç RANDOM_SEED –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
"""
import random
from typing import Optional

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç numpy
try:
    import numpy as np
    HAS_NUMPY = True
except ImportError:
    HAS_NUMPY = False
    np = None


def set_random_seed(seed: Optional[int] = None) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç seed –¥–ª—è –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª.
    
    Args:
        seed: –ó–Ω–∞—á–µ–Ω–∏–µ seed. –ï—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ config.py
    """
    if seed is None:
        from config import RANDOM_SEED
        seed = RANDOM_SEED
    
    if seed is not None:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è Python random
        random.seed(seed)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è numpy (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        if HAS_NUMPY and np is not None:
            np.random.seed(seed)
        
        print(f"üîí Random seed set to: {seed}")


def get_deterministic_choice(items: list, seed_suffix: str = "") -> any:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    
    Args:
        items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        seed_suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è seed (–¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º –∑–∞–ø—É—Å–∫–µ)
    
    Returns:
        –í—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    """
    if not items:
        return None
    
    from config import RANDOM_SEED
    if RANDOM_SEED is not None:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –¥–ª—è —ç—Ç–æ–≥–æ –≤—ã–±–æ—Ä–∞
        choice_seed = RANDOM_SEED + hash(seed_suffix) % 1000
        random.seed(choice_seed)
    
    return random.choice(items)


def get_deterministic_sample(items: list, k: int, seed_suffix: str = "") -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫—É—é –≤—ã–±–æ—Ä–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
    
    Args:
        items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
        k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
        seed_suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è seed
    
    Returns:
        –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    """
    if not items or k <= 0:
        return []
    
    if k >= len(items):
        return items.copy()
    
    from config import RANDOM_SEED
    if RANDOM_SEED is not None:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –¥–ª—è —ç—Ç–æ–π –≤—ã–±–æ—Ä–∫–∏
        sample_seed = RANDOM_SEED + hash(seed_suffix) % 1000
        random.seed(sample_seed)
    
    return random.sample(items, k)


def get_deterministic_shuffle(items: list, seed_suffix: str = "") -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
    
    Args:
        items: –°–ø–∏—Å–æ–∫ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
        seed_suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è seed
    
    Returns:
        –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    """
    if not items:
        return []
    
    from config import RANDOM_SEED
    if RANDOM_SEED is not None:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π seed –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
        shuffle_seed = RANDOM_SEED + hash(seed_suffix) % 1000
        random.seed(shuffle_seed)
    
    shuffled = items.copy()
    random.shuffle(shuffled)
    return shuffled


def ensure_determinism(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞ —Ñ—É–Ω–∫—Ü–∏–∏.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç seed –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏.
    """
    def wrapper(*args, **kwargs):
        set_random_seed()
        return func(*args, **kwargs)
    return wrapper


